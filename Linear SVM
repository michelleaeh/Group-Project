import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn import metrics
from sklearn import svm
from sklearn import tree
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score as acc
from sklearn.model_selection import cross_val_score
from sklearn.metrics import make_scorer

from scipy.io import loadmat

#Obtain data set
import io
import sys

filenames=['fbcsp_1.mat','fbcsp_2.mat','fbcsp_3.mat','fbcsp_4.mat','fbcsp_5.mat','fbcsp_6.mat','fbcsp_7.mat','fbcsp_8.mat','fbcsp_9.mat','fbcsp_10.mat','fbcsp_11.mat','fbcsp_12.mat','fbcsp_13.mat','fbcsp_14.mat','fbcsp_15.mat','fbcsp_16.mat','fbcsp_17.mat','fbcsp_18.mat']
tcol=['Accuracy','kappa statistic']
data=np.zeros((19,2))
trow=["" for x in range(19)]

for i in filenames:
  dataset=loadmat(io.BytesIO(uploaded[i]),struct_as_record=False)

  # Division of data
  Train_X = dataset['Train_X']
  Train_Y = dataset['Train_Y']
  Test_X = dataset['Test_X']
  Test_Y = dataset['Test_Y']

  #Normalization of data
  #scaler=StandardScaler()
  #scaler=scaler.fit(dataset)
  #StandardScaler()
  #normdata=scaler.transform(dataset)
  #data=pd.DataFrame(normdata,columns=dataset.columns)
  #data.Class=dataset.Train_Y

  #SVM classifier object creation
  sv=svm.LinearSVC()
  sv.fit(Train_X,Train_Y)
  LinearSVC()

  #Predict response of test data
  svpred=sv.predict(Test_X)

  for p in range(18):
    if filenames[p]==i:
      #Calculate accuracy
      acc=metrics.accuracy_score(Test_Y,svpred)
      data[p,0]=acc

      #Calculate kappa statistic
      kap=metrics.cohen_kappa_score(svpred,Test_Y)
      data[p,1]=kap

      #Set titles for data frame
      trow[p]='Patient '+str(p+1)
      trow[18]='Average'

#Calculate average accuracy and kappa statistics
avg=np.mean(data,axis=0)
data[18,0]=avg[0]
data[18,1]=avg[1]

#data=np.concatenate((data, avg), axis=0)
table=pd.DataFrame(data,columns=tcol,index=trow)
print(table)

sys.tracebacklimit = 0
#### References
# https://towardsdatascience.com/how-to-load-matlab-mat-files-in-python-1f200e1287b5
# https://stackoverflow.com/questions/31661188/import-files-in-python-with-a-for-loop-and-a-list-of-names
# https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.zeros.html
# https://stackoverflow.com/questions/5446522/data-type-not-understood
# https://stackoverflow.com/questions/35684318/numpy-2d-array-to-table
# https://www.geeksforgeeks.org/type-isinstance-python/
# https://stackoverflow.com/questions/21487329/add-x-and-y-labels-to-a-pandas-plot
# https://guide.freecodecamp.org/python/converting-integer-to-string-in-python/
# https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html
# https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.resize.html
